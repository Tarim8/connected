#!/bin/bash
# Connected
#
# Copyright Tarim 2016
#
# Connected is free software: you can redistribute it and/or modify
# it under the terms of the GNU Lesser General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# Connected is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU Lesser General Public License
# along with Connected.  If not, see <http://www.gnu.org/licenses/>.

# Connect to a command such as nc, telnet, ssh using bash style line editing
# and history.

Version="1.2"



# Used by SSH_ASKPASS; if SSH_ECHO is exported then echo SSH_PASSWORD and exit
[ -n "${SSH_ECHO}" ] && {
    echo "${SSH_PASSWORD}"
    exit 0
}



# Globals
HISTFILE="${HOME}/.connected_history"
Esc="~"
Signals="SIGINT SIGHUP SIGQUIT SIGABRT SIGKILL SIGTERM"



# Usage
usage() {
    echo -n "\
Usage: $(basename $0) [-esc ESCAPE_CHAR] [-hist HISTORY_FILE] [-intr] [-askpass PASSWORD_PROGRAM] [-passfile PASSWORD_FILE] [-password PASSWORD] [-debug] [-notty NOTTY_PROGRAM] CONNECT_CMD
-esc       set escape character for escape commands
-hist      set history file (default is ~/.connected_history)
-intr      allow interrupt character to be passed through immediately
-askpass   set program for ssh to ask for passwords (try ssh-askpass)
-passfile  set a file to read the ssh password from
-password  set a password for ssh (not recommended)
-debug     print debug messages
-notty     set a program to disconnect the controlling tty (notty or setsid)
-version   print version and exit

Commands at beginning of line:
${Esc}e         turn off echo
${Esc}r         enter raw mode
${Esc}{ctrl-J}  exit raw mode (send anywhere in line)
${Esc}X         send {ctrl-X} (or other control characters)
${Esc}${Esc}...      strip leading ${Esc}
${Esc}q         quit
{ctrl-D}   quit (eof character)
" >&2

    exit 0
}



# Try commands to drop the controlling TTY
for Cmd in notty $(dirname $(which "$0"))/notty setsid; do
    command -v "${Cmd% *}" >/dev/null 2>&1 && {
        NoTTYCmd="${Cmd}"
        break
    }
done


# Parse switches
while :; do
    case "$1" in
    -esc | --esc)
        shift
        Esc="$1"
        shift
        ;;

    -intr | --intr | -int | --int)
        IntrChr="$( stty -a | sed -n 's/.*intr = ^\(.\).*/\1/p' )"
        shift
        ;;

    -hist | --hist)
        shift
        HISTFILE="$1"
        shift
        ;;

    -debug | --debug)
        Debug=1
        shift
        ;;

    -version | --version | -v)
        echo $(basename "$0"): Version ${Version}
        exit 0
        ;;

    -password | --password)
        shift
        SSH_PASSWORD="$1"
        shift
        ;;

    -passfile | --passfile)
        shift
        SSH_PASSWORD=$( cat "$1" ) || {
            exit 1
        }
        shift
        ;;

    -askpass | --askpass)
        shift
        SSH_ASKPASS="$1"
        shift
        ;;

    -notty | --notty)
        shift
        NoTTYCmd="$1"
        shift
        ;;

    --)
        shift
        break
        ;;

    -*)
        usage
        ;;

    ssh)
        # ssh will use SSH_ASKPASS if it has a DISPLAY and no controlling tty
        # use this script as SSH_ASKPASS program when SSH_ECHO exported

        [ -n "${SSH_ASKPASS}" ] || {
            export SSH_ECHO=1
            SSH_ASKPASS="$0"

            [ -n "${SSH_PASSWORD}" ] || {
                if [ -t 0 ]; then
                    read -sp "Password: " SSH_PASSWORD
                    echo ""
                else
                    read -s SSH_PASSWORD
                fi
            }
            export SSH_PASSWORD
        }
        export SSH_ASKPASS

        [ -n "${DISPLAY}" ] || {
            DISPLAY="dummy:0.0"
        }
        export DISPLAY

        NoTTY="${NoTTYCmd}"
        break
        ;;

    telnet)
        NoTTY="${NoTTYCmd}"
        break
        ;;

    *)
        break
        ;;
    esac
done

[ "$#" = 0 ] && {
    usage
}



# Print debug messages
debug() {
    [ -n "${Debug}" ] && {
        echo "$@" >&2
    }
}


# Cleanup handler
cleanup() {
    debug "Cleanup"

    trap cleanconnect ${Signals}

    history -w
    exec 3>&-
    rm -f "${Pipe}" "${TeePipe}"

    wait "${ConnectPID}"

    cleanconnect
    exit ${1:-1}
}


# Cleanup connect commmand
cleanconnect() {
    trap - ${Signals}
    pkill -P $$
}


# Trap interrupts and send interrupt character (ctrl-C)
interrupt() {
    debug "Interrupt"
    ckconnect
    sendctrl "${IntrChr}"
}


# Make a temporary pipe
mkpipe() {
    local Name="/tmp/$(basename $0)-${1:-cmd}-$$.pipe"
    debug "Make pipe ${Name}"
    rm -f "${Name}"
    mkfifo "${Name}"
    echo "${Name}"
}


# Check connection still active
ckconnect() {
    ps -p "${ConnectPID}" >/dev/null 2>&1 || {
        echo "Remote connection closed" >&2
        cleanup 0
    }
}


# Send argument to connect command
sendline() {
    case "$1" in   
    -*)
        echo "X$1" | sed 's/^X//' >&3
        ;;
    *)
        echo "$1" >&3
        ;;
    esac
}


# Send control character to connect command
sendctrl() {
    echo -n "$1" | tr '@-_' '\000-\037' >&3
}


# Add argument to history
addhistory() {
    history -s -- "$1"
}



# Set cleanup handler
history -r
debug "Set cleanup"
trap cleanup ${Signals}

# Create pipes
Pipe="$(mkpipe)"
TeePipe="$(mkpipe tee)"

# Run the connect command and redirect stream 3 to it
debug "Run: ${NoTTY} $@"
${NoTTY} "$@" < "${Pipe}" &
ConnectPID=$!
exec 3>"${Pipe}"

# Interrupt handler if IntrChr set
[ -n "${IntrChr}" ] && {
    debug "Set handler {ctrl-${IntrChr}}"
    trap interrupt SIGINT
}

# Would this work if it was in the .inputrc file?
# bind set disable-completion On

# Check it's running (unimportant race hazard here)
ckconnect


# If no tty then don't edit line by line
[ -t 0 ] || {
    debug "Passthro"
    cat >&3
    Code="$?"
    debug "Done"
    cleanup "${Code}"
}

# Main read loop
debug "Enter read loop"
while read -er Line; do
    ckconnect
    case "${Esc:+${Line}}" in

    # Echo off; don't record in history
    ${Esc}e)
        debug "Echo off"
        read -ers Line
        ckconnect
        sendline "${Line}"
        ;;

    # Quit loop and cleanup
    ${Esc}q)
        break
        ;;

    # Raw mode
    ${Esc}r)
        debug "Enter raw mode"

        SttyModes="$(stty -g)"
        stty raw -echo -echoe -echok -echoctl -echoke

        tee "${TeePipe}" >&3 <&0 &
        TeePID=$!
        # grep quits when it sees escape char followed by ctrl-J (end of line)
        grep -q "${Esc}"'$' < "${TeePipe}"

        kill "${TeePID}" >/dev/null 2>&1
        stty "${SttyModes}"
        debug "Exit raw mode"
        ckconnect
        ;;

    # Send corresponding control character
    ${Esc}[A-Z@\[\\\]_^])
        sendctrl "${Line#${Esc}}"
        ;;

    # Strip leading escape character
    ${Esc}${Esc}*)
        sendline "${Line#${Esc}}"
        addhistory "${Line}"
        ;;

    # Send line as is
    *)
        sendline "${Line}"
        addhistory "${Line}"
        ;;
    esac
done

debug "Exit read loop"
cleanup 0
